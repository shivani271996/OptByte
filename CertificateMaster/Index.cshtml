@using CostEstimation;
@using CostEstimation.FX;
@using CostEstimation.Common.Const;

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<style>
    .dx-texteditor-input-container {
        margin-top: -7px;
    }
    
    /*.dx-overlay-content {
        width: 400px !important;
    }*/
    
    #file-upload {
        padding: 3px;
    }

    #filename {
        background-color: transparent;
        color: black;
        display: none;
        margin-left: -25px;
        font-size: 16px;
        padding: 2px;
    }

    .dx-command-select {
        width: 40px !important;
        min-width: 40px !important;
    }

    #btnAdmin {
        padding: 10px 13px;
        color: black !important;
        border-width: 1px;
        text-align: center;
        /* margin-top: -2px;
        margin-left: -1px;*/
        border-radius: 4px;
        /*margin-right: -320px;*/
        border-style: outset;
    }

    .dx-button-has-text .dx-button-content, .dx-button .dx-button-content {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        padding: 3px;
    }

    .dx-submenu {
        width: 103px;
    }

    .dx-menu-base {
        width: auto !important;
    }

    .dx-validationsummary-item-content {
        border-bottom: 0px dashed;
        display: inline-block;
        line-height: normal;
    }

    #btnnew {
        padding: 10px 13px;
        color: black !important;
        border-width: 1px;
        text-align: center;
        margin-top: -1px;
        margin-left: 0px;
        border-radius: 4px;
        margin-right: -320px;
        border-style: outset;
    }

    #filename {
        background-color: transparent;
        color: black;
        display: none;
        margin-left: -25px;
        font-size: 16px;
        padding: 2px;
    }

    #removefileName {
        font-size: 20px;
        color: red;
    }

    .remove-large {
        font-size: 14px;
        color: #fff;
        border-radius: 30px;
        padding: 5px 6px;
        border: 1px solid #AEAEAE;
        border-radius: 30px;
        background: #7b7f86;
    }

        .remove-large:hover {
            color: red;
            background: #fff;
        }

    #content {
        padding: 10px 18px;
        min-height: 80vh;
        transition: all 0.3s;
        min-width: 110%;
        margin-left: -55px;
        background-color: whitesmoke;
        margin-top: -20px;
        border-radius: 5px;
    }

    #btnAdmin {
        padding: 10px 13px;
        color: black !important;
        border-width: 1px;
        text-align: center;
        /* margin-top: -2px;
        margin-left: -1px;*/
        border-radius: 4px;
        /*margin-right: -320px;*/
        border-style: outset;
    }

    #dialog-form .modal-header {
        padding: 5px 15px !important;
    }

    #summary {
        padding-left: 10px;
        margin-top: 3px;
        margin-bottom: 10px;
        font-size: 11px;
        font-weight: 700;
        text-decoration: none;
    }

    #button {
        display: block;
    }

    #btn.btn {
        background-color: lightgray;
        padding: 7px;
        width: 150px;
        text-align: center;
        margin-top: 0px;
        margin-left: 0px;
        border-radius: 0px
    }

    .errorclass {
        font-size: 11px;
        color: red;
    }
</style>
<div id="divLoading" style="margin: 0px; padding: 0px; position: fixed; right: 0px; top: 0px; width: 100%; height: 100%; background-color: #666666; z-index: 30001; opacity: .8; filter: alpha(opacity=70); display: none">
    <p style="position: absolute; top: 30%; left: 45%; color: White;">
        &nbsp; &nbsp;  &nbsp;  &nbsp;  &nbsp;   @resources.PLEASE_WAIT
        <br />
        <img src="~/Images/waiting.gif" alt="" style="height:20%;width:20%" />
    </p>
</div>

<div class="wrapper">
    <div id="content">
        <div class="row">
            <div>
                @if (@TempData.CanAccess(Permissions.ADD))
                {
                    <button id="btnAdmin" class="command-home glyphicon glyphicon-cog" title="@resources.HM_ADMIN_PGTLT"></button>
                }
                &nbsp;
            </div>
            <div><label id="btn" class="btn  command-new pull-left ">@resources.CERTIFICATE_MASTER</label>&nbsp;</div>
            <div>
                @if (@TempData.CanAccess(Permissions.ADD))
                {
                    <button id="btnnew" class="glyphicon glyphicon-plus-sign command-new pull-left" title="@resources.ADD_CERTIFICATE"></button>
                }
            </div>
        </div>
        <div>&nbsp;</div>
        <div class="row" style="">
            <div id="grid"></div>
        </div>
        <div id="contextMenu"></div>
    </div>
</div>

<form id="frmCertMaster">

    <div id="dialog-form" role="dialog" aria-hidden="true" tabindex="-1" class="modal" data-backdrop="static">
        <div class="modal-dialog ui-draggable" id="certDialog" style="
            width: 85% !important;">
            <div class="modal-content" style="width: 100%;">
                <div class="modal-header ui-draggable-handle">

                    <div class="col-md-9">
                        <h4 class=".modal-title text-white">
                            Save Certificate
                        </h4>
                    </div>
                    <div class="col-md-3">
                        <button id="btnClose" class="btn btn-sm btn-danger pull-right" data-dismiss="modal" title="@resources.COMN_CLOSE_BTN" style="margin-left:5px;"><i class="fa fa-window-close" aria-hidden="true"></i></button>
                        <button id="btnSubmit" class="btn btn-sm btn-success pull-right" title="@resources.COMN_SAVE_BTN"><i class="fa fa-save" aria-hidden="true"></i></button>
                    </div>
                </div>
                <div class="modal-body" style="overflow-y: auto;">
                    <div id="error"></div>
                    <input type="hidden" name="ID" id="ID" class="form-control" />
                    <div class="row">
                        <div class="col-md-12">
                            <h5><b>@resources.Certf_Details</b></h5>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 col-xs-12">

                            <label>
                                <span style="color:red;">* </span>
                                @*@resources.Certificate_NAME*@
                                Type
                            </label>
                            <input type="text" name="CertificateName" id="CertificateName" class="form-control">

                        </div>
                        <div class="col-md-3 col-xs-12">

                            <label>
                                <span style="color:red;">* </span>
                                @*@resources.Certificate_CODE*@
                                Shortcode
                            </label>


                            <input type="text" name="Certificateshortcode" id="Certificateshortcode" class="form-control">

                        </div>

                        <div class="col-md-3 col-xs-12">
                            <label>
                                <span style="color:red;">* </span>
                                Number

                            </label>

                            <input type="text" name="Certificatenumber" id="Certificatenumber" class="form-control">

                        </div>
                        <div class="col-md-3 mb-4 col-xs-12">

                            <label>@resources.DESCRIPTION </label>


                            <textarea type="text" name="Description" id="Description" class="form-control" style="height:35px; resize:none"></textarea>

                        </div>

                    </div>
                    <div class="row">
                        <div class="col-md-3 col-xs-12">

                            <label>
                                <span style="color:red;">* </span>
                                @resources.COMN_STARTDATE_LBL

                            </label>

                            @*<input name="Startdate" id="Startdate" class="form-control">*@
                            @*<input name="Startdate" id="Startdate" class="form-control">*@

                            <div name="Startdate" id="Startdate" class="form-control"></div><span id="starterr" class="hidden"><label class="starterrorclass errorclass"></label></span>


                        </div>
                        <div class="col-md-3 col-xs-12">

                            <label>
                                <span style="color:red;">* </span>
                                @resources.COMN_ENDDATE_LBL

                            </label>
                            @*<input name="EndDate" id="EndDate" class="form-control">*@

                            <div name="EndDate" id="EndDate" class="form-control"></div><span id="Enderr" class="hidden"><label class="Enderrorclass errorclass"></label></span>

                        </div>

                        <div class="col-md-6 mb-4 col-xs-12">

                            <label>@resources.Upload_softcopy</label>
                            <div class="d-flex align-items-center">

                                <input type="file" name="Certificatefile" id="Certificatefilename" class="fileuploadcntl py-1 form-control w-50">

                                <div>
                                    <a id="filename" class="m-0 px-3"></a>
                                    <span class='fa fa-close remove-large removedocument' style='font-size:10px; display:none' id='removefileName'></span>
                                </div>
                            </div>

                        </div>

                    </div>
                    <div>
                        <div class="row">
                            <div class="col-md-12">
                                <h5><b>@resources.Product_Allocation</b></h5>
                            </div>
                        </div>
                        <div class="row">

                            <div class="col-md-3 col-xs-12">
                                @*<span style="color:red;">* </span>*@
                                <label><span style="color:red;">* </span>@resources.BRAND</label>

                                <div name="Brand" id="Brand" class="form-control"></div><span id="Branderr" class="hidden"><label class="Branderrorclass errorclass"></label></span>

                            </div>

                            <div class="col-md-3 col-xs-12">
                                <span style="color:red;">* </span>
                                <label>@resources.ELIM_FACTORY_LBL</label>

                                <div id="Factory" class="form-control"></div><span id="Factoryerr" class="hidden"><label id="Factoryerr" class="Factoryerrorclass errorclass"></label></span>

                            </div>


                            <div class="col-md-3 mb-4 col-xs-12">
                                <span style="color:red;">* </span>
                                <label>@resources.COM_PRODUCT_LINE</label>

                                <div id="ProductLine" class="form-control"></div><span id="ProductLineerr" class="hidden"><label class="ProductLineerrorclass errorclass"></label></span>
                            </div>

                        </div>
                        <div class="row">
                            <div class="col-md-3 mb-4 col-xs-12">
                                <span style="color:red;">* </span>
                                @*<label>@resources.Product_Category</label>*@
                                <label>Product Category</label>
                                @*<input type="text" name="ProductCategory" id="ProductCategory" class="form-control" autocomplete="off">*@
                                <div id="ProductCategory" class="form-control"></div><span id="ProductCategoryerr" class="hidden"><label class="ProductCategoryerrorclass errorclass"></label></span>
                            </div>

                            <div class="col-md-3 col-xs-12">
                                <span style="color:red;">* </span>
                                <label>@resources.ITEM_SERIES</label>

                                <div id="ItemSeries" class="form-control"></div><span id="ItemSerieserr" class="hidden"><label class="ItemSerieserrorclass errorclass"></label></span>
                                <input type="hidden" name="ItemSeries" id="ItemSeriesnames">
                            </div>
                        </div>

                        <div class="row ">
                            <div class="col-md-12 mb-4">
                                @*<h5><b>@resources.RC_Alloction</b></h5>*@
                                <h5><b>Region & Country allocation</b></h5>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">


                                <label>
                                    <span style="color:red;">* </span>
                                    @resources.REGION_ID

                                </label>

                                <div id="Region" class="Region"></div><span id="regionerr" class="hidden"><label class="regionerrorclass errorclass"></label></span>
                                @*<div name="Regionname" id="Regionname" class="form-control"></div>
                                    <input type="hidden" name="RegionList" id="RegionList" class="form-control" data-rrlist='@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.regionlst))' />
                                    <input type="hidden" id="Region" name="Region" class="form-control" />*@

                                <div class="summary"></div>

                            </div>
                            <div class="col-md-4">

                                <label>
                                    <span style="color:red;">* </span>
                                    @resources.COUNTRY_ID

                                </label>


                                <div id="Country" class="form-control"></div><span id="countryerr" class="hidden"><label class="countryerrorclass errorclass"></label></span>
                                @*//<input type="hidden" name="Country" id="Countrynames">*@
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-12">
                                <h5><b>@resources.Responsible</b></h5>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-3 col-xs-12">

                                <label><span style="color:red;">* </span>@resources.COMM_DEPARTMENT_LBL</label>
                                <div id="Department" class="Department"></div><span id="departmenterr" class="hidden"><label class="departmenterrorclass errorclass"></label></span>
                                @*<div name="Departmentname" id="Departmentname" class="form-control"></div>
                                    <input type="hidden" name="DepartmentList" id="DepartmentList" class="form-control" data-departlist='@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Deptlst))' />
                                    <input type="hidden" id="Department" name="Department" class="form-control" />*@

                            </div>
                            <div class="col-md-3 col-xs-12">
                                <span style="color:red;">* </span>
                                <label>@resources.User</label>

                                <div id="UserName" class="form-control"></div><span id="UserNameerr" class="hidden"><label class="UserNameerrorclass errorclass"></label></span>
                            </div>
                        </div>

                    </div>

                </div>
            </div>
        </div>
    </div>

</form>
<!-- Central Modal Medium -->
<div class="modal fade" id="centralModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header" style="background:#d9534f;">
                <div class="col-md-9">
                    <h4 class="modal-title w-100" id="myModalLabel">Alert!</h4>
                </div>
                <div class="col-md-3">
                    <input type="hidden" id="deletedId" />
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" title="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            </div>
            <div class="modal-body" id="alert_text">

            </div>
            <div class="modal-footer">
                <button type="button" id="btnYes" class="btn btn-danger" title="Save">@resources.COMN_YES_LBL</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" title="Close">@resources.COMN_NO_LBL</button>
            </div>
        </div>
    </div>
</div>
<!-- Central Modal Medium -->
@section scripts{
    <script>

        const ViewBag = {
              userid : @ViewBag.UserId,
        }

        const access = {
            permupdate: '@TempData.CanAccess(Permissions.UPDATE)'==='True'? true : false,
            permdelete: '@TempData.CanAccess(Permissions.DELETE)'==='True'? true : false,
            permadd: '@TempData.CanAccess(Permissions.ADD)'==='True'? true : false,
        }

        const resource = {
            exporttoexcel: '@resources.EXPORT_TO_EXCEL',
           // entityaddbtn: '@resources.ENTITY_ADD_BTN',
            searchplcholder: '@resources.COMN_SEARCH_PLC_HOLDER',
            clearbtn: '@resources.COMN_CLEAR_BTN',
            selectonelbl: '@resources.COMN_SELECTONE_LBL',
            btnclosetext : '@resources.COMN_CLOSE_BTN',

            confirmyes: '@resources.COMN_YES_LBL',
            confirmno: '@resources.COMN_NO_LBL',
            pagetitle: '@resources.CERTIFICATE_MASTER',
        }

    </script>

    <div>
        <script>

        $('#Startdate').dxDateBox({
            type: 'date',
            //value: now,
           displayFormat: 'dd/MM/yyyy',
        });
        const start = $('#Startdate').dxDateBox("instance");

        $('#EndDate').dxDateBox({
                type: 'date',
                displayFormat: 'dd/MM/yyyy',
        });
        const end = $('#EndDate').dxDateBox("instance");
        var countries;
        $(function () {
            var ID = 0;
            UploadName = null;
            var filepath;
            ContentType = null;
            let regionIds;

            let countryIds;
            let UserIds;
            let departmentIds;

            let FactoryIds;
            let LineIds;
            let brandIds;
            let Fac;
            let CategoryIds;

            //var ID = 0;



            $("#frmCertMaster").validate({
                rules: {
                    CertificateName: {  //Copy from json strignifier
                        required: true
                    },
                    Certificateshortcode: {
                        required: true
                    },
                    Certificatenumber: {
                        required: true
                    },
                    Startdate: {
                        required: true,

                    },
                    EndDate: {
                        required: true,

                    },

                    Brand: {
                        required: true,

                    },
                    Factory: {
                        required: true,

                    },
                    ProductLine: {
                        required: true,

                    },

                    ProductCategory: {
                        required: true,

                    },
                    ItemSeries: {
                        required: true,

                    },
                    Region: {
                        required: true,

                    },
                    Country: {
                        required: true,


                    },
                    Departmentname: {
                        required: true,
                        /* regex: /^\w+([\]?\w+)*\w+([\.]?\w+)*(\w{2,3})+$/*/
                    },
                    UserName: {
                        required: true,
                    }

                },
                messages: {
                    CertificateName: {  //Copy from json strignifier
                        required: 'Please Enter Certificate Name ',
                    },
                    Certificateshortcode: {
                        required: 'Please Enter Certificate Code ',
                    },
                    Certificatenumber: {
                        required: 'Please Enter Certificatenumber'
                    },
                    Startdate: {
                        required: 'Please Enter Date',

                    },
                    EndDate: {
                        required: 'Please Enter End Date ',

                    },

                    Brand: {
                        required: 'Please Enter Brand',

                    },
                    Factory: {
                        required: 'Please Enter Factory',

                    },
                    ProductLine: {
                        required: 'Please Enter Product Line',

                    },

                    ProductCategory: {
                        required: 'Please Enter Product Category',

                    },
                    ItemSeries: {
                        required: 'Please Enter Item Series',

                    },
                    Region: {
                        required: 'Please Enter Region',

                    },
                    Country: {
                        required: 'Please Enter Country',


                    },
                    Departmentname: {
                        required: 'Please Enter Department',
                    },
                    UserName: {
                        required: 'Please Enter User',
                    }

                }

            });

            let searchVal = '';

            $("#btnnew").click(function () {
                clearcontrol();

                $('#btnSubmit').attr('hidden', false);
                $('#removefileName').hide();
                $("form :input").attr("disabled", false);
                $('#btnClose').attr('disabled', false);
                $(".modal-title").text("@resources.Save_Certificate");
                $('#dialog-form').modal('show');
                $("#certDialog").draggable({ handle: "div.modal-header" });
                $("#btnSendInvite").prop('hidden', true);

            });

            $("#btnClear").click(function () {
                $("#txtSearch").val('');
                $("#grid-basic").bootgrid("search", "");

            });
            $("#btnCancel").click(function () {
                clearcontrol();
                $('#dialog-form').modal('hide');
            });
            function clearcontrol() {
                $('#ID').val(0);
                $('#Startdate').val();
                $('label.error').remove();
                
                $('UploadName').empty();
                $('#Region').val('');
                $('#filename').text("");
               
                $('#Certificatefilename').val('');
                UserDdl.reset();
                brandrr.reset();
                factoryDdl.reset();
                lineDdl.reset();
                depart.reset();
                start.reset();
                end.reset();
                SeriesNameDdl.reset();
                ProductCategoryDdl.reset();
                regionDDList.reset();
                countryDdl.reset();

                brandArr = [];
                departmentArr = [];
                factoryArr = [];
                lineArr = [];

                regionArr = [];
                countryArr = [];
                ProductCategoryArr = [];
                SeriesNameArr = [];
                UserArr = [];
                $('#CertificateName').val('');

                $('#Certificateshortcode').val('');
                $('#Startdate').val('');
                $('#Description').val('');
                $('#EndDate').val('');
                $('#Certificatenumber').val('');

                //$('#ItemSeries').val('');
                $('#Department').val('');
                //$('#UserName').val('');
                $('#Region').val('');
                $('#Country').val('');
                $('#Brand').val('');
                $('#Factory').val('');
                $('#ProductLine').val('');
                $('#ProductCategory').val('');
              //  $('#Department').val('');
                $('#ItemSeries').val('');
                $('#UserName').val('');

                $("#countryerr").addClass("hidden");
                $("#UserNameerr").addClass("hidden");
                $("#Factoryerr").addClass("hidden");
                $("#Branderr").addClass("hidden");
                $("#ProductLineerrerr").addClass("hidden");
                $("#ProductCategoryerr").addClass("hidden");
                $("#ProductCategoryerrorclass").text("");
                $("#ItemSerieserr").addClass("hidden");
                $("#starterr").addClass("hidden");
                $("#Enderr").addClass("hidden");
                $("#regionerr").addClass("hidden");
                $("#countryerr").addClass("hidden");
                $("#departmenterr").addClass("hidden");
               
                $(".countryerrorclass").text("");
                $(".Enderrorclass").text("");
                $(".starterrorclass").text("");
                $(".UserNameerrorclass").text("");
                $(".Factoryerrorclass").text("");
                $(".Branderrorclass").text("");
                $(".ProductLineerrorclass").text("");
                $(".ItemSerieserrclass").text("");
                $(".countryerrclass").text("");
                $(".departmenterrclass").text("");

            }

            let dataGridbrad;
            let dataGrid2;
            let dataGridcat;
            let dataGrid6;


            const makeAsyncDataSourcebrand = function () {
                return new DevExpress.data.CustomStore({
                    loadMode: 'raw',

                    key: 'Id',
                    load() {
                        return $.get('Masters/BrandMaster/BrandForCertificate');

                    },
                });
            };
            $('#Brand').dxDropDownBox({

               valueExpr: 'Id',

                placeholder: 'Select Name...',

                displayExpr: 'BrandName',
                showClearButton: true,
                DefaultValue: true,
                dataSource: makeAsyncDataSourcebrand(),
                dropDownOptions: {
                    width: 200,
                    height: 500
                },
                contentTemplate(e) {
                    const value = e.component.option('value');
                    const $dataGridbrad = $('<div>').dxDataGrid({
                        dataSource: e.component.getDataSource(),
                       // columns: [{ dataField: 'BRANDNAME', caption: 'Brand', },],
                        columns: [{ dataField: 'BrandName', caption: 'Brand', },],

                        hoverStateEnabled: true,

                        columnAutoWidth: true,
                        allowColumnResizing: true,
                        columnResizingMode: 'widget',
                        paging: { enabled: true, pageSize: 10 },
                        filterRow: { visible: true },
                        scrolling: { mode: 'virtual' },

                        selection: { mode: 'single' },
                        selectedRowKeys: [value],
                        height: '100%',
                        onSelectionChanged(selectedItems) {
                            const keys = selectedItems.selectedRowKeys;
                            e.component.option('value', keys);

                        },
                    });

                    dataGridbrad = $dataGridbrad.dxDataGrid('instance');

                    e.component.on('valueChanged', (args) => {
                        const { value } = args;
                        dataGridbrad.selectRows(value, false);
                        factoryDdl.reset();
                        factoryDs.reload();

                        if (factoryArr.length > 0)
                            factoryDs.load().done(function (data) {
                                factoryDdl.option('value', factoryArr);
                            });

                    });

                    return $dataGridbrad;
                },
            });
            const brandrr = $('#Brand').dxDropDownBox("instance");
            const brands = brandrr.getDataSource();

        
            const makeAsyncDataSource2 = function () {
                return new DevExpress.data.CustomStore({
                    loadMode: 'raw',
                    //key: 'FACTORYID',
                    key: 'FactoryId',
                    load: function (loadOptions) {
                        let brandIds = brandrr.option("value").toString().split(',');
                     
                        if (brandIds != null)
                            return $.get('Masters/FactoryMaster/FactoryIdForCertificate', { 'brandIds': JSON.stringify(brandIds.toString()) });

                    },
                });
            };
            $('#Factory').dxDropDownBox({
                valueExpr: 'FactoryId',
                placeholder: 'Select Factory...',
                displayExpr: 'FACTORYNAME',
                showClearButton: true,
                dataSource: makeAsyncDataSource2(),
                dropDownOptions: {
                    width: 350,
                    height: 500
                },
                contentTemplate(e) {
                    const value = e.component.option('value');
                    const $dataGrid2 = $('<div>').dxDataGrid({
                        dataSource: e.component.getDataSource(),

                        //columns: ['FACTORYNAME','COUNTRYNAME'],
                        columns: [{ dataField: 'FACTORYNAME', caption: 'Factory', }, { dataField: 'COUNTRYNAME', caption: 'Country', },],
                        hoverStateEnabled: true,
                        columnAutoWidth: true,
                        allowColumnResizing: true,
                        columnResizingMode: 'widget',
                        paging: { enabled: true, pageSize: 10 },
                        filterRow: { visible: true },
                        scrolling: { mode: 'virtual' },
                        selection: { mode: 'single' },

                        selectedRowKeys: value,
                        height: '100%',
                       // selectionMode: "all",

                        onSelectionChanged(selectedItems) {
                            const keys = selectedItems.selectedRowKeys;

                            e.component.option('value', keys);
                        },
                    });

                    dataGrid2 = $dataGrid2.dxDataGrid('instance');

                    e.component.on('valueChanged', (args) => {
                        const { value } = args;
                        dataGrid2.selectRows(value, false);
                        lineDdl.reset();
                        lineDs.reload();

                        if (lineArr.length > 0)
                            lineDs.load().done(function (data) {
                                lineDdl.option('value', lineArr);
                            });

                    });

                    return $dataGrid2;
                },
            });

            const factoryDdl = $('#Factory').dxDropDownBox("instance");
            const factoryDs = factoryDdl.getDataSource();


            let dataGrid4;
            const makeAsyncDataSource4 = function () {
                return new DevExpress.data.CustomStore({
                    loadMode: 'raw',
                    key: 'LineId',
                    load: function (loadOptions) {
                        //return $.get('Masters/CertifiacteMaster/LineForCertificate');


                        let FactoryIds = factoryDdl.option("value").toString().split(',');
                        let BrandIds = brandrr.option("value").toString().split(',');
                        if (FactoryIds != null)

                            //return $.get('Masters/FactoryMaster/FactoryIdForCertificate', { 'brandIds': JSON.stringify(brandIds.toString()) });
                            return $.get('Masters/CertificateMaster/GetLineForFactoryIds', { FactoryIds: JSON.stringify(FactoryIds.toString()), BrandIds: JSON.stringify(BrandIds.toString())});


                    },
                });
            };

            $('#ProductLine').dxDropDownBox({
               // valueExpr: 'LINEID',
                valueExpr: 'LineId',

                placeholder: 'Select Line...',
                displayExpr: 'LineName',
                //showClearButton: true,
                showClearButton: false,
                deferRendering: false,
                DefaultValue:true,
                dataSource: makeAsyncDataSource4(),
                dropDownOptions: {
                    width: 400,
                    height: 500
                },
                contentTemplate(e) {
                   
                    const value = e.component.option('value');
                    const $dataGrid4 = $('<div>').dxDataGrid({
                        dataSource: e.component.getDataSource(),

                        columns: [{ dataField: 'LineName', caption: 'Line', },],

                        hoverStateEnabled: true,
                        columnAutoWidth: true,
                        allowColumnResizing: true,
                        columnResizingMode: 'widget',
                        paging: { enabled: true, pageSize: 10 },
                        filterRow: { visible: true },
                        scrolling: { mode: 'virtual' },
                        selection: { mode: 'multiple' },
                        //selectionMode: "all",
                        selectedRowKeys: value,
                        height: '100%',
                        onSelectionChanged(selectedItems) {
                            const keys = selectedItems.selectedRowKeys;
                            //let brandid = selectedItems.BrandId;
                            e.component.option('value', keys);

                        },
                    });

                    dataGrid4 = $dataGrid4.dxDataGrid('instance');

                    e.component.on('valueChanged', (args) => {
                        
                        const { value } = args;
                        dataGrid4.selectRows(value, false);
                        ProductCategoryDdl.reset();
                        ProductCategoryDs.reload();


                        if (ProductCategoryArr.length > 0)
                            ProductCategoryDs.load().done(function (data) {
                                ProductCategoryDDl.option('value', ProductCategoryArr);
                            });
                    });

                    return $dataGrid4;
                },
            });
            //Edit
            const lineDdl = $('#ProductLine').dxDropDownBox("instance");
            const lineDs = lineDdl.getDataSource();
          

            const makeAsyncDataSource5 = function () {
                return new DevExpress.data.CustomStore({
                    loadMode: 'raw',
                    key: 'CategoryId',
                    load: function (loadOptions) {
                        

                        let LineIds = lineDdl.option("value").toString().split(',');
                        let FactoryIds = factoryDdl.option("value").toString().split(',');
                        let BrandIds = brandrr.option("value").toString().split(',');
                      
                        if (LineIds != null)

                            //return $.get('Masters/FactoryMaster/FactoryIdForCertificate', { 'brandIds': JSON.stringify(brandIds.toString()) });
                            return $.get('Masters/CertificateMaster/GetCategoryForFactoryIds', { LineIds: JSON.stringify(LineIds.toString()), FactoryIds: JSON.stringify(FactoryIds.toString()), BrandIds: JSON.stringify(BrandIds.toString()) });

                    },
                });
            };
            $('#ProductCategory').dxDropDownBox({
                valueExpr: 'CategoryId',

                placeholder: 'Select Category Name...',
                displayExpr: 'CategoryName',
               // showClearButton: true,
                DefaultValue: true,
                deferRendering:false,
                dataSource: makeAsyncDataSource5(),
                dropDownOptions: {
                    width: 350,
                    height: 500
                },
                contentTemplate(e) {
                    const value = e.component.option('value');
                    const $dataGridcat = $('<div>').dxDataGrid({
                        dataSource: e.component.getDataSource(),
                        //columns: ['CATEGORYNAME', 'LINENAME', 'BRANDNAME'],
                        columns: [{ dataField: 'CategoryName', caption: 'Category',}, { dataField: 'LineName', caption: 'Line', },],

                        hoverStateEnabled: true,
                        columnAutoWidth: true,
                        allowColumnResizing: true,
                        columnResizingMode: 'widget',
                        paging: { enabled: true, pageSize: 10 },
                        filterRow: { visible: true },
                        scrolling: { mode: 'virtual' },
                        selection: { mode: 'multiple' },
                        //selectionMode: "all",

                        selectedRowKeys: value,
                        height: '100%',
                        onSelectionChanged(selectedItems) {
                            const keys = selectedItems.selectedRowKeys;
                            //let id = selectedItems.ID;
                            e.component.option('value', keys);

                        },
                    });

                    dataGridcat = $dataGridcat.dxDataGrid('instance');

                    e.component.on('valueChanged', (args) => {
                        const { value } = args;
                        dataGridcat.selectRows(value, false);
                        SeriesNameDdl.reset();
                        SeriesNameDs.reload();
                        if (SeriesNameArr.length > 0)
                            SeriesNameDs.load().done(function (data) {
                                SeriesNameDdl.option('value', SeriesNameArr);
                            });

                    });

                    return $dataGridcat;
                },
            });
            //Edit
            const ProductCategoryDdl = $('#ProductCategory').dxDropDownBox("instance");
            const ProductCategoryDs = ProductCategoryDdl.getDataSource();


            const makeAsyncDataSource6 = function () {
                return new DevExpress.data.CustomStore({
                    loadMode: 'raw',
                    key: 'Id',
                    load: function (loadOptions) {
                        let CategoryIds = ProductCategoryDdl.option("value").toString().split(',');
                        let LineIds = lineDdl.option("value").toString().split(',');
                        let FactoryIds = factoryDdl.option("value").toString().split(',');

                        //let BrandIds = brandrr.option("value");

                        if (CategoryIds != null)

                           // return $.get('Masters/CertificateMaster/GetCategoryForFactoryIds', { LineIds: JSON.stringify(LineIds.toString()) });
                           // return $.get('Masters/CertificateMaster/GetSeriesForLineIds', { CategoryIds: JSON.stringify(CategoryIds.toString()) }, { FactoryIds: JSON.stringify(FactoryIds.toString()) }, { LineIds: JSON.stringify(LineIds.toString()) });
                            return $.get('Masters/CertificateMaster/GetSeriesForLineIds', { CategoryIds: JSON.stringify(CategoryIds.toString()), FactoryIds: JSON.stringify(FactoryIds.toString()), LineIds: JSON.stringify(LineIds.toString())});


                    },
                });
            };
            $('#ItemSeries').dxDropDownBox({
                valueExpr: 'Id',
                keyExpr: "Id",
                deferRendering: false,
                placeholder: 'Select Item Series...',
                displayExpr: 'SeriesName',
                showClearButton: true,
                DefaultValue:true,
                dataSource: makeAsyncDataSource6(),
                dropDownOptions: {
                    width: 350,
                    height: 500
                },

                contentTemplate(e) {
                    const value = e.component.option('value');
                    const $dataGrid6 = $('<div>').dxDataGrid({
                        dataSource: e.component.getDataSource(),
                        //columns: ['SERIESNAME', 'CATEGORYNAME'],
                        columns: [{ dataField: 'SeriesName', caption: 'ItemSeries', }, { dataField: 'CategoryName', caption: 'Category', },],

                        hoverStateEnabled: true,
                        columnAutoWidth: true,
                        allowColumnResizing: true,
                        columnResizingMode: 'widget',
                        paging: { enabled: true, pageSize: 10 },
                        filterRow: { visible: true },
                        scrolling: { mode: 'virtual' },
                        selection: { mode: 'multiple' },
                        selectionMode: "all",
                        selectedRowKeys: value,
                        height: '100%',
                        onSelectionChanged(selectedItems) {
                            const keys = selectedItems.selectedRowKeys;
                            let brandid = selectedItems.brandId;
                            e.component.option('value', keys);

                        },
                    });

                    dataGrid6 = $dataGrid6.dxDataGrid('instance');

                    e.component.on('valueChanged', (args) => {
                        const { value } = args;
                        dataGrid6.selectRows(value, false);


                    });

                    return $dataGrid6;
                },
            });
            //Edit
            const SeriesNameDdl = $('#ItemSeries').dxDropDownBox("instance");
            const SeriesNameDs = SeriesNameDdl.getDataSource();

            //devexpress multiselect grid for Region

            let dataGrid;
            let dataGrid1;

            const makeAsyncDataSource = function () {
                return new DevExpress.data.CustomStore({
                    loadMode: 'raw',
                    key: 'ID',
                    load() {
                        return $.get('Masters/RegionMaster/GetRegionList');

                    },
                });
            };

            $('#Region').dxDropDownBox({

                valueExpr: 'ID',

                placeholder: 'Select Region...',
                displayExpr: 'Region',
                showClearButton: true,
                DefaultValue: true,
                dataSource: makeAsyncDataSource(),

                contentTemplate(e) {
                    const value = e.component.option('value');
                    const $dataGrid = $('<div style="width:530px !important">').dxDataGrid({
                        dataSource: e.component.getDataSource(),
                        columns: ['Region'],
                        hoverStateEnabled: true,
                        columnAutoWidth: true,
                        allowColumnResizing: true,
                        columnResizingMode: 'widget',
                        paging: { enabled: true, pageSize: 10 },
                        filterRow: { visible: true },
                        scrolling: { mode: 'virtual' },
                        selection: { mode: 'multiple' },
                        selectedRowKeys: value,
                        height: '100%',
                        onSelectionChanged(selectedItems) {
                            const keys = selectedItems.selectedRowKeys;
                            e.component.option('value', keys);
                        },
                    });

                    dataGrid = $dataGrid.dxDataGrid('instance');

                    e.component.on('valueChanged', (args) => {

                        const { value } = args;
                        dataGrid.selectRows(value, false);
                       countryDdl.reset();
                       countryDs.reload();


                        if (countryArr.length > 0)
                            countryDs.load().done(function (data) {
                                countryDdl.option('value', countryArr);
                            });

                    });

                    return $dataGrid;
                },
            })

            const regionDDList = $('#Region').dxDropDownBox("instance");
            const dsRegion = regionDDList.getDataSource();

            const makeAsyncDataSource1 = function () {
                return new DevExpress.data.CustomStore({
                    loadMode: 'raw',
                    key: 'CountryID',
                    load: function (loadOptions) {
                        let regionIds = regionDDList.option("value").toString().split(',');
                        console.log(regionIds);
                        if (regionIds != null)
                            
                            return $.get('Masters/CountryMaster/GetCountryListByRegions', { 'regionIds': JSON.stringify(regionIds.toString()) });
                    },
                });
            };
            $('#Country').dxDropDownBox({
                valueExpr: 'CountryID',
                keyExpr: "CountryID",
                deferRendering: false,
                placeholder: 'Select Country...',
                displayExpr: 'CountryName',
                showClearButton: true,
                dataSource: makeAsyncDataSource1(),
                DefaultValue: true,

                contentTemplate(e) {
                    const value = e.component.option('value');
                    const $dataGrid1 = $('<div>').dxDataGrid({
                        dataSource: e.component.getDataSource(),
                        columns: ['CountryName', 'CountryCode'],
                        hoverStateEnabled: true,
                        columnAutoWidth: true,
                        allowColumnResizing: true,
                        columnResizingMode: 'widget',
                        paging: { enabled: true, pageSize: 10 },
                        filterRow: { visible: true },
                        scrolling: { mode: 'virtual' },
                        selection: { mode: 'multiple' },
                        selectionMode: "all",
                        selectedRowKeys: value,
                        height: '100%',
                        onSelectionChanged(selectedItems) {
                            const keys = selectedItems.selectedRowKeys;
                            let regionId = selectedItems.RegionID;
                            e.component.option('value', keys);

                        },
                    });

                    dataGrid1 = $dataGrid1.dxDataGrid('instance');

                    e.component.on('valueChanged', (args) => {
                        const { value } = args;
                        dataGrid1.selectRows(value, false);
                    });

                    return $dataGrid1;
                },
            })

            const countryDdl = $('#Country').dxDropDownBox("instance");
            const countryDs = countryDdl.getDataSource();

            let dataGriddep;
            let dataGriduser;
            const makeAsyncDataSourcedep = function () {
                return new DevExpress.data.CustomStore({
                    loadMode: 'raw',
                    key: 'Id',
                    load() {

                        return $.get('Masters/DepartmentMaster/GetDepList');
                        //let departlist = $("#DepartmentList").data("departlist");

                       // return departlist;
                    },
                });
            };
            $('#Department').dxDropDownBox({

                valueExpr: 'Id',

                placeholder: 'Select Name...',
                displayExpr: 'Name',
                showClearButton: true,
                DefaultValue: true,
                dataSource: makeAsyncDataSourcedep(),
                dropDownOptions: {
                    width: 300,
                    height: 500
                },
                contentTemplate(e) {
                    const value = e.component.option('value');
                    const $dataGriddep = $('<div>').dxDataGrid({
                        dataSource: e.component.getDataSource(),
                        columns: ['Name', 'Code'],
                        hoverStateEnabled: true,
                        columnAutoWidth: true,
                        allowColumnResizing: true,
                        columnResizingMode: 'widget',
                        paging: { enabled: true, pageSize: 10 },
                        filterRow: { visible: true },
                        scrolling: { mode: 'virtual' },
                        selection: { mode: 'multiple' },
                        selectedRowKeys: value,
                        height: '100%',
                        onSelectionChanged(selectedItems) {
                            const keys = selectedItems.selectedRowKeys;
                            e.component.option('value', keys);
                        },
                    });

                    dataGriddep = $dataGriddep.dxDataGrid('instance');

                    e.component.on('valueChanged', (args) => {
                        const { value } = args;
                        dataGriddep.selectRows(value, false);
                        UserDdl.reset();
                        UserDs.reload();

                        if (UserArr.length > 0)
                            UserDs.load().done(function (data) {
                                UserDdl.option('value', UserArr);
                            });

                    });

                    return $dataGriddep;
                },
            })
            const depart = $('#Department').dxDropDownBox("instance");
            const deps = depart.getDataSource();


            const makeAsyncDataSource3 = function () {
                return new DevExpress.data.CustomStore({
                    loadMode: 'raw',
                    key: 'UserId',
                    load: function (loadOptions) {
                        let departmentIds = depart.option("value").toString().split(',');
                        if (departmentIds != null)
                            return $.get('Masters/UserMaster/Userlist', { 'departmentIds': JSON.stringify(departmentIds.toString()) });
                    },
                });
            };
            $('#UserName').dxDropDownBox({

                valueExpr: 'UserId',

                placeholder: 'Select User...',
                displayExpr: 'UserFullName',
                showClearButton: true,

                dataSource: makeAsyncDataSource3(),

                contentTemplate(e) {
                    const value = e.component.option('value');
                    const $dataGriduser = $('<div>').dxDataGrid({
                        dataSource: e.component.getDataSource(),
                        columns: ['UserFullName'],
                        hoverStateEnabled: true,
                        columnAutoWidth: true,
                        allowColumnResizing: true,
                        columnResizingMode: 'widget',
                        paging: { enabled: true, pageSize: 10 },
                        filterRow: { visible: true },
                        scrolling: { mode: 'virtual' },

                        selection: { mode: 'multiple' },
                        sectionMode: "all",
                        selectedRowKeys: value,
                        height: '100%',
                        onSelectionChanged(selectedItems) {
                            const keys = selectedItems.selectedRowKeys;
                            let brandid = selectedItems.brandId;
                            e.component.option('value', keys);
                        },
                    });

                    dataGriduser = $dataGriduser.dxDataGrid('instance');

                    e.component.on('valueChanged', (args) => {
                        const { value } = args;
                        dataGriduser.selectRows(value, false);
                    });

                    return $dataGriduser;
                },
            });
            const UserDdl = $('#UserName').dxDropDownBox("instance");
            const UserDs = UserDdl.getDataSource();

            function bindDatawithcntl(data) {
                // For Editing
                let factoryArr = [];
                let UserArr = [];
                let ProductCategoryArr = [];
                let SeriesNameArr = [];
                let lineArr = [];
                let countryArr = [];
                let regionArr = [];
                let brandArr = [];
                let departmentArr = [];

                $('#ID').val(data.ID);
                regionIds = data.Region.replace(/,\s*$/, "").split(',');
                
                countryIds = data.Country.toString().split(',');
                console.log(countryIds);

                brand = data.Brand.replace(/,\s*$/, "").split(',');
                brandIds = data.Factory.replace(/,\s*$/, "").split(',');
                FactoryIds = data.ProductLine.replace(/,\s*$/, "").split(',');         
               
                LineIds = data.ProductCategory.toString().split(',');
                console.log(LineIds);
                departmentIds = data.Department.replace(/,\s*$/, "").split(',');
                CategoryIds = data.ItemSeries.toString().split(',');
                console.log(CategoryIds);
                console.log("hit");
               // CategoryIds = data.ItemSeries.replace(/,\s*$/, "").split(',');
                UserIds = data.UserName.replace(/,\s*$/, "").split(',');

                if (brand != "") {
                    brand.forEach(function (value) {
                        brandArr.push(parseInt(value));
                    });
                }
                if (brandIds != "") {
                    brandIds.forEach(function (value) {
                        factoryArr.push(parseInt(value));

                    });
                }
               
                if (FactoryIds != "") {
            
                    FactoryIds.forEach(function (value) {
                        
                        lineArr.push(parseInt(value));
                      

                    });
                    
                }

                if (LineIds != "") {
                    LineIds.forEach(function (value) {
                        ProductCategoryArr.push(parseInt(value));

                    });
                }
                if (CategoryIds != "") {
                    CategoryIds.forEach(function (value) {
                        SeriesNameArr.push(parseInt(value));

                    });
                }

                brands.load().done(function (data) {
                    brandrr.option("value", brandArr);

                    factoryDs.load().done(function (data) {
                        factoryDdl.option("value", factoryArr);
                      
                        lineDs.load().done(function (data) {
                            lineDdl.option("value", lineArr);
                          
                       
                            ProductCategoryDs.load().done(function (data) {
                                ProductCategoryDdl.option("value", ProductCategoryArr);

                                SeriesNameDs.load().done(function (data) {
                                    SeriesNameDdl.option("value", SeriesNameArr);
                                   
                                });
                            });

                        });
                     
                    });

                });
                if (regionIds != "") {
                    regionIds.forEach(function (value) {
                        regionArr.push(parseInt(value));
                    });
                }
                dsRegion.load().done(function (data) {
                    regionDDList.option("value", regionArr);

                   countryIds.forEach(function (value) {
                        countryArr.push(parseInt(value));
                    });
                    countryDs.load().done(function (data) {
                        countryDdl.option('value', countryArr);

                });
                });

                //dep and user

                if (departmentIds != "") {
                    departmentIds.forEach(function (value) {
                        departmentArr.push(parseInt(value));
                    });
                }
                UserIds.forEach(function (value) {
                    UserArr.push(parseInt(value));
                });


                deps.load().done(function (data) {
                    depart.option("value", departmentArr);

                    UserDs.load().done(function (data) {
                        UserDdl.option('value', UserArr);
                    });
                });
                
                start.option("value", moment(data.Startdate));
                end.option("value", moment(data.EndDate));
                $('#CertificateName').val(data.CertificateName);
                $("#ProductCategory").val(data.ProductCategory);
                 $("#CountryId").val(data.CountryId);
                 $("#ItemSeries").val(data.ItemSeries);
               // console.log(item);
                $('#Certificateshortcode').val(data.Certificateshortcode);
                $('#Description').val(data.Description);
                $('#Certificatenumber').val(data.Certificatenumber);

                UploadName = data.Certificatefilename;

                if (typeof data.Certificatefilename !== 'undefined') {
                    $('#filename').show(); $('#removefileName').show();
                }

                $('#filename').text(data.Certificatefilename);

            }
            function onEdit(ID) {
                clearcontrol();

                $('#dialog-form').modal('show');
                $('#divLoading').show();
                $.ajax({
                    type: 'POST',
                    url: "Masters/CertificateMaster/GetById",
                    data: { 'ID': ID },
                    dataType: 'json',
                    success: function (data) {
                        $(".modal-title").text("Edit Certificate");
                        $('#divLoading').hide();
                        //clearcontrol();
                        bindDatawithcntl(data);
                        //var cun = (data.Country)
                        //countryDs.load().done(function (data) {
                        //    countryDdl.option("value", cun)
                        //});

                    },
                    error: function (ex) {
                        showErrorMsg(ex);
                        $('#divLoading').hide();
                    }
                });

            }

            $(document).on('keypress', '#certDialog', function (event) {
                var keyPressed = event.keyCode || event.which;
                if (keyPressed === 13) {
                    event.preventDefault();
                    return false;
                }

            });

            let manuItems = [];

            $("#contextMenu").dxContextMenu({
                target: "#btnManu",
                displayExpr: "name",
                itemsExpr: "items",
                onItemClick: onItemClick,

                onHiding: function (e) {
                    abc = null;
                },
            });


            function onItemClick(e) {

                switch (e.itemData.name) {
                    case "Edit":
                        onEdit(ID);
                        break;
                    case "Delete":
                        onDelete(ID);
                        break;

                }
            }

            // For Deleting
            function onDelete(e) {
                $(".modal-title").text("Alert !");
                $('#alert_text').text("@resources.DAL_CERTIF");
                $('#centralModal').modal('show');
                $('#deletedId').val(e);
            }

            $("#btnYes").on("click", function () {

                $('#divLoading').show();
                $.ajax({
                    type: 'POST',
                    url: "Masters/CertificateMaster/DeleteById",

                    data: { 'ID': $('#deletedId').val() },
                    dataType: 'json',
                    success: function (data) {
                        $('#centralModal').modal('hide');
                        showSuccessMsg('Deleted Successfully!!');
                        datagrid.refresh();
                        ID = 0;
                        $('#divLoading').hide();

                    },
                    error: function (ex) {
                        $('#divLoading').hide();
                        showErrorMsg(ex);
                        errorHandler(ex);
                    }
                });
            });

            $("#btnSubmit").click(function () {

                

                if (!$("#frmCertMaster").valid()) {

                    if (start.option("value") == null || start.option("value") == "NaN") {
                        
                        $("#starterr").removeClass("hidden");
                        $(".starterrorclass").text("Please select Start Date");
                        
                    }

                    if (end.option("value") == null || end.option("value") == "NaN") {
                        $("#Enderr").removeClass("hidden");
                        $(".Enderrorclass").text("Please select End Date");
                       
                    }
                    if (end.option("value") < start.option("value")) {

                        showWarningMsg("End date should be greater than Start date.");
                        
                    }
                    if (brandrr.option("value") == null || factoryDdl.option("value") == "NaN") {
                        $("#Branderr").removeClass("hidden");
                        $(".Branderrorclass").text("Please select Brand");
                       
                    }

                    if (factoryDdl.option("value") == null || lineDdl.option("value") == "NaN") {
                        $("#Factoryerr").removeClass("hidden");
                        $(".Factoryerrorclass").text("Please select Factory");
                       
                    }

                    if (lineDdl.option("value") == null || ProductCategoryDdl.option("value") == "NaN") {
                        $("#ProductLineerr").removeClass("hidden");
                        $(".ProductLineerrorclass").text("Please select Line");
                       
                    }
                    if (ProductCategoryDdl.option("value") == null || SeriesNameDdl.option("value") == "NaN") {
                        $("#ProductCategoryerr").removeClass("hidden");
                        $(".ProductCategoryerrorclass").text("Please select Product Category");
                        
                    }
                    if (SeriesNameDdl.option("value") == null || SeriesNameDdl.option("value") == "NaN") {
                        $("#ItemSerieserr").removeClass("hidden");
                        $(".ItemSerieserrorclass").text("Please select Item Series");
                       
                    }


                    if (regionDDList.option("value") == null || countryDdl.option("value") == "NaN") {
                        $("#regionerr").removeClass("hidden");
                        $(".regionerrorclass").text("Please select Region");
                        
                    }

                    if (countryDdl.option("value") == null || countryDdl.option("value") == "NaN") {
                        $("#countryerr").removeClass("hidden");
                        $(".countryerrorclass").text("Please select Country");
                        
                    }

                    if (depart.option("value") == null || UserDdl.option("value") == "NaN") {
                        $("#departmenterr").removeClass("hidden");
                        $(".departmenterrorclass").text("Please select Department");
                       
                    }

                    if (UserDdl.option("value") == null || UserDdl.option("value") == "NaN") {
                        $("#UserNameerr").removeClass("hidden");
                        $(".UserNameerrorclass").text("Please select User");
                        
                    }
                    return false;
                   
                }
                
               //Department
                if ($("#Departments").find("input[type=hidden]").val() == "") {
                    $("#Department").val("0");
                }
                else {
                    $("#Departments").val($("#Departments").find("input[type=hidden]").val());
                }
                //Region
                if ($("#Region").find("input[type=hidden]").val() == "") {
                    $("#Region").val("0");
                }
                else {
                    $("#Region").val($("#Region").find("input[type=hidden]").val());
                }
                //brand
                if ($("#Brand").find("input[type=hidden]").val() == "") {
                    $("#Brand").val("0");
                }
                else {
                    $("#Brand").val($("#Brand").find("input[type=hidden]").val());
                }

                var formData = new FormData(document.getElementById("frmCertMaster")), formobject = {}; for (var entry of formData.entries()) { formobject[entry[0]] = entry[1]; }


                let certModel = JSON.stringify({
                    ID: parseInt($('#ID').val()),

                    CertificateName: encodeString($('#CertificateName').val()),
                    Certificateshortcode: encodeString($('#Certificateshortcode').val()),
                    Certificatenumber: encodeString($('#Certificatenumber').val()),
                    Description: encodeString($('#Description').val()),

                    Factorys: encodeString(factoryDdl._changedValue),

                    ProductLine: encodeString($('#ProductLine').val()),

                    ProductCategory: encodeString($('#ProductCategory').val()),

                    ItemSeries: encodeString($('#ItemSeries').val()),

                    Department: encodeString($('#Department').val()),
                    Region: encodeString($('#Region').val()),

                    Startdate: ($('#Startdate').find("input[type=hidden]").val()),

                    EndDate: ($('#EndDate').find("input[type=hidden]").val()),


                    Region: $("#Region").find("input[type=hidden]").val(),
                    Regions: encodeString(regionDDList._changedValue),
                    Brand: $("#Brand").find("input[type=hidden]").val(),
                    Department: $("#Department").find("input[type=hidden]").val(),
                    Departments: encodeString(depart._changedValue),
                    Factory: $("#Factory").find("input[type=hidden]").val(),
                    Country: $("#Country").find("input[type=hidden]").val(),
                    Countrys: encodeString(countryDdl._changedValue),
                    ProductCategory: $("#ProductCategory").find("input[type=hidden]").val(),

                    ProductCategorys: encodeString(ProductCategoryDdl._changedValue),

                    ProductLine: $("#ProductLine").find("input[type=hidden]").val(),
                    //ProductLines: $(lineDdl._changedValue).find("input[type=hidden]"),
                    ProductLines: encodeString(lineDdl._changedValue),
                    ItemSeries: $("#ItemSeries").find("input[type=hidden]").val(),
                    Item: encodeString(SeriesNameDdl._changedValue),
                    UserName: $("#UserName").find("input[type=hidden]").val(),
                    UserNames: encodeString(UserDdl._changedValue),

                    Certificatefilename:(UploadName),
                    Certificatefilepath: encodeString(filepath)

                })
             
                $("#btnSubmit").prop('disabled', true);
                $("#divLoading").show();
              
                $.ajax({
                    url: 'Masters/CertificateMaster/SaveCertificateMaster',
                    dataType: "json",
                    data: certModel,
                    type: "POST",
                    contentType: "application/json; charset=utf-8",

                    success: function (data) {
                        clearcontrol();
                        $("#divLoading").show();
                        $('#dialog-form').modal('hide');

                        if (data.isExist) {
                            $("#btnSubmit").prop('disabled', false);
                            showWarningMsg("This Code is already exist");
                            return false;
                        }
                        else {
                            $("#btnSubmit").prop('disabled', false);
                            showSuccessMsg('Submitted Successfully!!');
                            datagrid.refresh();
                            ID = 0;
                          
                        }

                        $("#divLoading").hide();
                    },
                    error: function (err) {
                        $("#btnSubmit").prop('disabled', false);
                        clearcontrol();
                        $('#dialog-form').modal('hide');
                        showErrorMsg(err.responseText);
                        $("#divLoading").hide();
                    }
                });
            });
            function isNotEmpty(value) {
                return value !== undefined && value !== null && value !== '';
            }
            // Code For Dx.Datagrid
            const datagrid = $('#grid').dxDataGrid({
                dataSource: new DevExpress.data.CustomStore({
                    key: "ID",
                    loadMode: "raw",
                    load: function (loadOptions) {
                        let d = $.Deferred();

                        const args = {};

                        [
                            'skip',
                            'take',
                            'requireTotalCount',
                            'requireGroupCount',
                            'sort',
                            'filter',
                            'totalSummary',
                            'group',

                            "parentIds",

                            "searchExpr",
                            "searchOperation",
                            "searchValue",
                        ].forEach((i) => {
                            if (i in loadOptions && isNotEmpty(loadOptions[i])) {
                                args[i] = JSON.stringify(loadOptions[i]);
                            }
                        });

                        $.getJSON("Masters/CertificateMaster/GetBrowser", args)
                            .done(function (response) {
                                d.resolve(response.rows, {
                                    totalCount: response.totalCount,
                                    summary: null,
                                    groupCount: null
                                })
                            })
                            .fail(function () { throw "Data loading error" });

                        return d.promise();
                    }
                }),
                searchPanel: {
                    visible: true,
                    /*highlightCaseSensitive: true,*/
                },
                scrolling: {
                    mode: 'virtual',
                    rowRenderingMode: 'virtual',
                },
                paging: {
                    pageSize: 10
                },
                pager: {
                    visible: true,
                    showPageSizeSelector: true,
                    allowedPageSizes: [10, 20, 50, 100, 250, 500],
                    showPageSizeSelector: true,
                    showInfo: true,       //pageinfo
                    showNavigationButtons: true,
                },
                loadPanel: {
                    enabled: true,
                },

                onCellPrepared: function onCellPrepared(e) {
                    if (e.rowType == "header") {
                        e.cellElement.css("text-align", "center");
                        e.cellElement.css("font-weight", "bold");
                    }
                    if (e.rowType == "data") {
                        e.cellElement.css("text-align", "left");
                    }

                },

                columnAutoWidth: true,
                allowColumnResizing: true,
                columnResizingMode: 'widget',
                width: '100%',
                rowAlternationEnabled: true,
                focusedRowEnabled: true,
                hoverStateEnabled: true,
                allowColumnReordering: true,
                showBoarders: true,
                showColumnLines: true,
                showRowLines: true,
                keyExpr: 'ID',
                remoteOperations: { groupPaging: false },
                scrolling: {
                    enabled: true,
                },
                columnChooser: {
                    enabled: true,
                    mode: "select",
                },
                Sorting: {
                    mode: 'multiple',
                },
                grouping: {
                    contextMenuEnabled: true,
                    expandMode: 'rowClick',
                },
                groupPanel: {
                    emptyPanelText: '@resources.COMN_HEADER',
                    visible: true,
                },
                export: {
                    enabled: true,
                    fileName: "@resources.CERTIFICATE_MASTER",
                },

                onExported(e) {
                    e.component.columnOption('Actions', 'visible', true);
                    e.component.endUpdate();
                },
                onOptionChanged: function (e) {
                    if (e && e.name == 'searchPanel') {
                        searchVal = e.value;
                        datagrid.refresh();
                    }
                },
                onRowClick: function (e) {
                    if (e.rowType === "data") {
                        ID = e.data.ID;
                
                    }
                    if (abc) {
                        manuItems = [];
                        if (access.permupdate) {
                            
                            manuItems.push({ name: 'Edit' });
                        }

                        if (access.permdelete) {
                            manuItems.push({ name: 'Delete' });
                        }

                        $('#contextMenu').dxContextMenu('instance').option('items', manuItems);
                        $('#contextMenu').dxContextMenu('instance').option('target', abc);
                        $('#contextMenu').dxContextMenu('instance').show();
                    }
                },
                onContextMenuPreparing: function (e) {
                    
                    let menuitems2 = []
                    if (access.permupdate) {
                        console.log('hit');
                        menuitems2.push({
                            text: "Edit",
                            onItemClick: function () {
                                onEdit(e.row.data.ID);
                            }
                        });
                    }
                    if (access.permdelete) {
                        menuitems2.push({
                            text: "Delete",
                            onItemClick: function () {
                                onDelete(e.row.data.ID);
                            }
                        });
                    }

                    if (e.row && e.row.rowType === "data" && menuitems2.length > 0) {
                        e.items = menuitems2;
                    }

                },

                columns: [
                    {
                        dataField: 'RowNumber',
                        caption: '#',
                        alignment: 'center',
                        width: 30,

                    },
                    {
                        dataField: 'ID',
                        caption: 'ID',
                        alignment: 'center',
                        maxWidth: 100,
                        showInColumnChooser: false,
                        visible: false,
                    },

                    {
                        caption: '@resources.Certf_Details',
                        columns: [{
                            dataField: 'CertificateName',   //sql
                           // caption: '@resources.Certificate_NAME',  //Resource
                            caption: 'Type',  //Resource
                            alignment: 'center',
                            maxWidth: 100,
                            showInColumnChooser: true,

                        },
                        {
                            dataField: 'Certificateshortcode',
                            @*//caption: '@resources.Certificate_CODE',*@
                            caption: 'Short Code',
                            alignment: 'center',
                            width: 100,
                            showInColumnChooser: true,
                            },
                        {
                            dataField: 'Certificatenumber',
                            caption: 'Number',
                            alignment: 'center',
                            width: 80,
                            showInColumnChooser: true,
                        },
                        {
                        dataField: 'Description',
                        caption: '@resources.DESCRIPTION',
                        alignment: 'center',
                        width: 100,
                        visible: true,
                    },
                    {
                        dataField: 'Startdate',
                        caption: '@resources.COMN_STARTDATE_LBL',
                        alignment: 'center',
                        width: 100,
                        cellTemplate(container, option) {
                            $('<div>')
                                .append(moment(option.value).format('D-MMM-YYYY')).css("text-align", "center")

                                .appendTo(container)
                        }
                    },
                    {
                        dataField: 'EndDate',
                        caption: '@resources.COMN_ENDDATE_LBL',
                        alignment: 'center',
                        width: 100,
                        cellTemplate(container, option) {
                            $('<div>')
                                .append(moment(option.value).format('D-MMM-YYYY')).css("text-align", "center")

                                .appendTo(container)
                        }
                    },

                        ]
                    },
                    //
                    {
                        caption: '@resources.Product_Allocation',
                        columns: [{
                            dataField: 'Brand',   //sql
                            caption: '@resources.BRAND',  //Resource
                            alignment: 'center',
                            width: 100,
                            showInColumnChooser: true,

                        },
                        @*{
                            dataField: 'Factory',
                            caption: '@resources.ELIM_FACTORY_LBL',
                            alignment: 'center',
                            maxWidth: 100,
                            showInColumnChooser: true,
                            },*@
                        {
                            dataField: 'Factorys',
                            caption: '@resources.ELIM_FACTORY_LBL',
                            alignment: 'center',
                            width: 100,
                            showInColumnChooser: true,
                         },
                        @*{
                            dataField: 'ProductLine',
                            caption: '@resources.PRODUCT_LINE',
                            alignment: 'center',
                            maxWidth: 150,
                            visible: true,
                            },*@
                        {
                            dataField: 'ProductLines',
                            caption: '@resources.PRODUCT_LINE',
                            alignment: 'center',
                            width: 200,
                            visible: true,
                    },

                         {
                        dataField: 'ProductCategorys',
                        caption: 'Product Category',
                        alignment: 'center',
                         width: 200,
                    },

                         {
                        dataField: 'Item',
                        caption: '@resources.ITEM_SERIES',
                        alignment: 'center',
                             width: 200,
                    },

                        ]
                    },

                    {
                       // caption: '@resources.RC_Alloction',
                        caption: 'Geographical Allocation',
                        columns: [{
                            dataField: 'Regions',
                            caption: '@resources.Region',
                            alignment: 'center',
                            width: 200,
                            showInColumnChooser: true,

                        }, {
                            dataField: 'Countrys',
                            caption: '@resources.COUNTRY',
                            alignment: 'center',
                            width: 200,
                            showInColumnChooser: true,
                        }
                        ]
                    },
                    {
                        caption: '@resources.Responsible',
                        columns: [{
                            dataField: 'Departments',
                            caption: '@resources.COMM_DEPARTMENT_LBL',
                            alignment: 'center',
                            width: 100,
                            showInColumnChooser: true,

                        }, {
                            dataField: 'UserNames',
                            caption: '@resources.User',
                            alignment: 'center',
                            width: 200,
                            showInColumnChooser: true,
                        }
                        ]
                    },
                    {
                        dataField: 'Certificatefilename',
                        caption: 'Download',
                        alignment: 'center',
                        width: 100,
                        visible: true,
                        cellTemplate(container, option) {
                            $('').appendTo(container);

                            if (option.data.Certificatefilename) {
                                let li = $('<button" class="fa fa-download">');
                                li.click(function () {

                                    Download(option.data.ID);
                                })
                                $('<div>')
                                    .append(li).css("text-align", "center")
                                    .appendTo(container);
                            }

                            else {

                                let li = $('<span>&nbsp;&nbsp;&nbsp;</span><span>' + + '</span>');
                                $('<div>')
                                    .append(li).css("text-align", "center")
                                    .appendTo(container)
                            }
                        }
                    },
                    {
                        caption: 'Actions',
                        alignment: 'center',
                        maxWidth: 80,
                        fixed: true,
                        fixedPosition: "right",        // to set the right
                        cellTemplate: formatersCellTemplate,
                        showInColumnChooser: false,
                        allowExporting: false,
                    }
                ],
                summary: {
                    groupItems: [{
                        column: 'ID',
                        summaryType: 'count',
                    }],
                },
            }).dxDataGrid('instance');
        });
           
        const formatersCellTemplate = function (certificate, options) {
            console.log('hit');
            $('<button class="fa fa-ellipsis-h menuButton" style="cursor: pointer;border:0px" onClick="showManu(event)"></button>').appendTo(certificate);
        };

        var abc;
        function showManu(e) {
            if (e.target) {
                abc = e.target;

            }
        }
        //upload
        $(document).on('change', ".fileuploadcntl", function (evt) {

            var files = evt.target.files;
            var file = files[0];
            var fileData = new FormData();
          
            if (file != null) {


                if (!checkSupportedFormat_logo(file.name)) {
                    $(this).val('');
                    return;
                }
                fileData.append(file.name, file);

                $.ajax({
                    url: 'Masters/CertificateMaster/UploadFile',
                    type: 'post',
                    data: fileData,
                    contentType: false,
                    processData: false,
                    async: false,
                    success: function (response) {

                        filepath = response.filepath;
                        ContentType = response.contenttype;
                        UploadName = file.name;

                    },
                    error: function (ex) {

                        showErrorMsg(ex);
                    }
                });
            }
            else {
                return;
            }
        });
       
          
        $(document).on('click', '#removefileName', function (e) {

            logoContentType = null;

            $('#filename').hide(); $('#removefileName').hide();

        })

        function Download(ID) {
             document.location = "CertificateMaster/DownloadFile?ID=" + ID;

        };


        $(document).on("click", ".command-home", function () {
            document.location = "Admin/Admin";
        });

        </script>
    </div>
}

